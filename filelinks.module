<?php


/**
 * Implementation of hook_filter_tips().
 */
function filelinks_filter_tips($delta, $format, $long = false) {

  if( $long ) {
    return t('Filelink macros, e.g. [flink filename.pdf]  insert links to local files. Some examples:') . theme('item_list',
	  array('<b>[flink filename.pdf|title=New Title]</b> (use specified title instead of filename.pdf))',
	  '<b>[flink filename.pdf|title=New Title|show_pagecount=0]</b> (override the default page count option)',
	  '<b>[flink filename.pdf|description=Contains interesting information]</b> (add descriptive text along with file size, page count, etc)'));
  }
  else {
    return t('[flink] macros expand to local file links.');
  }
}

/** 
 * Implementation of hook_theme()
 */

function filelinks_theme() {
  return array(
    'filelink' => array('arguments' => array('macro' => null, 'text' => '')),
	'filelinks_admin' => array('arguments' => array('form' => null), 'file' => 'filelinks.admin.inc'),
  );
}

/**
 * implementation of hook_menu
 */

function filelinks_menu() {

  $items = array(
    'admin/settings/filelinks' => array(
	  'title' => 'File Links',
	  'description' => 'Configure File LInks input filter',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('filelinks_admin'),
	  'access arguments' => array('administer filters'),
	  'file' => 'filelinks.admin.inc',
	),
  );

  return $items;
}

function filelinks_filter($op, $delta = 0, $format = -1, $text = '', $cache_id=0) {
  switch ($op) {
    case 'list':
      return (array(0 => t('File Links filter')));

    case 'description':
      return t('Lets you easily add hyperlinks and descriptions to files on your website\'s server.');

    case 'process':
	  $params = variable_get('filelinks_settings', array());

      foreach (filelinks_get_macros($text) as $unexpanded_macro => $macro) {
        $expanded_macro = theme('filelink', $macro);
        $text = str_replace($unexpanded_macro, $expanded_macro, $text);
      }
      return $text;

    default:
      return $text;
  }
}

/*
 * implementation of hook_help
 */

function filelinks_help($section, $arg) {

  switch($section) {
    case 'admin/modules#filelinks':
	  return t('Input filter to easily and hyperlinks and descriptions for files on your server');

    case 'admin/help#filelinks':
	  $text = '<p>' . t('The filelinks module adds a filter that lets you quickly add informative hyperlinks to files on your website\'s server via macros. For example:') . '</p><p>[flink&nbsp;filename.pdf|text=My&nbsp;PDF]</p>';
	  $text .= '<p>' . t('can automatically become:') . '</p><p>' . htmlspecialchars('<a href="http://pdf.company.org/downloads/filename.pdf">My PDF</a> (2.3 Mb, 98 pages)') . '</p>';
	  $text .= '<p>' . t('Macros are in the form <b>[flink(_tag) filename (parameters)]</b>. The parenthetical parts are optional. Parameters are each preceded by "|". You configure the filter to look at one or more directories to find files. The "_tag" part lets you specify which directory to look in. If you omit the tag, the filter looks at all search paths in order until it finds the specified file.') . '</p>';
	  $text .= '<h3>' . t('Configuration') . '</h3>';
	  $text .= '<p>' . t('You must specify "search paths" in which the filter will look for files referenced in the macros.') . '</p>';

	  $text .= theme('item_list',
	    array(t('<b>tag:</b> identifies the directory to the macro. It is required, and should be unique.'),
		t('<b>location:</b> is either a) a unix-style path: path/to/directory, or b) the url of a RESTful interface for retrieving file meta data (see the sample script in the module directory). In the former case, either absolute or relative paths are allowed; relative paths are construed as relative to your Drupal root directory. It can be blank, in which case it is the search path is the Drupal root. If the path begins with "/" then it is considered an absolute system path.'),
		  t('<b>url:</b> you can create links to files in other domains so long as they are hosted by the same server as your Drupal site. If you include a url it is prepended to the file name in the link. If the path is an absolute system path and url is empty, then the url to the Drupal root directory is assumed.')));

	  $text .= '<h3>' . t('Parameters') . '</h3>';
	  $text .= theme('item_list',
	    array(t('<b>text</b> = link\'s text (instead of the file name)'),
		'<b>description</b> = descriptive text (included with file statistics)',
		'<b>show_filesize</b> = [1|0] (overrides default settings)',
		'<b>show_dimensions</b> = [1|0] (shows image dimensions&mdash;overrides default settings)',
		'<b>show_pagecount</b> = [1|0] (number of pages in pdf;&mdash;overrides default settings)',
		'<b>show_playlength</b> = [1|0] (audio length;&mdash;overrides default settings)'));

	  return $text;
  }

  return '';
}

function filelinks_get_macros($text) {
  $m = array();

  $params = filelinks_settings();

  preg_match_all('/\[flink([^\[\]]+)*\]/i', $text, $matches);
  $tag_match = (array) array_unique($matches[1]); // Don't process duplicates.

  foreach ($tag_match as $macro) {
    $vars = array();
    $id = '';

    $current_macro = '[flink'. $macro .']';
    $param = array_map('trim', explode('|', $macro));
    $file_name = array_shift($param); // first parameter is the file name, not key=value
    if( preg_match('/^_(\w+\*?)\s+(.+)/', $file_name, $parts) ) {
      $id = $parts[1];
      $file_name = $parts[2];
    }

	if( preg_match('/(\S+)\s+(.+)/', $file_name, $parts) && count($param) == 0) {
	  // support for [flink file.txt click here] <=> [flink file.txt | text=click here]
	  $file_name = $parts[1];
	  $vars['text'] = $parts[2];
	}

    foreach ($param as $p) {
      if( ($pos = strpos($p, '=')) === false ) {
	    $vars[trim($p)] = '';
	  }
	  else {
        $varname = substr($p, 0, $pos);
        $varvalue = substr($p, $pos + 1);
		if( ($varname = trim($varname)) ) {
		  $vars[trim($varname)] = $varvalue;
		}
	  }
    }

	foreach(array('show_filesize', 'show_dimensions', 'show_pagecount','show_playlength','show_filetype') as $p ) {
	  if( isset($vars['show_all']) ) {
	    $vars[$p] = 1;
	  }
	  elseif( isset($vars['show_none']) ) {
	    $vars[$p] = 0;
	  }
	  elseif( !isset($vars[$p]) ) {
	    $vars[$p] = $params[$p];
	  }
	}

	/* Sanitize:

	   1) strip attempts to access parent directory
	   2) Assume that &amp; really means &; very likely that a previous filter would have screwed this up for us
	*/
    $vars['filename'] = str_replace(array('../', '&amp;'), array('', '&'), $file_name);
    $vars['id'] = strtolower($id);

    // the full unaltered filter string is the key for the array of filter attributes
    $m[$current_macro] = $vars;
  }

  return $m;
}

function filelinks_findfile($name, $location='') {
  $settings = filelinks_settings();

  // go search for the file
  foreach($settings['paths'] as $path) {
	list($id,$dir,$url) = array($path['tag'], $path['path'], $path['url']);

	if( substr($id, -1, 1) == '*' ) {
	  // Location is ONLY to be searched if specified
	  if( $id != $location . '*' ) {
	    continue;
	  }
	}
	elseif( $location && strtolower($id) != $location) {
	  // Location specific: does not match
	  continue;
	}

	$dir = preg_replace('|/$|', '', $dir);  // no trailing slash please
	$url = preg_replace('|/$|', '', $url);  // no trailing slash please

	if( strpos($dir, 'http://') === 0 ) {
	  /* Get file meta-data via a RESTful tool: we expect a serialized PHP array as return.
	     In this instance, we ignore the $url parameter */
	  $url = $dir . '?' . drupal_query_string_encode(array('tag' => preg_replace('/\W/', '', $id), 'path' => $name));
	  if( $contents = file_get_contents($url) ) {
	    $data = unserialize($contents);
		if( $data['status'] == 200 ) {
		  return $data;
		}
	  }

	  return array();
	}
	$fullpath = ($dir ? "$dir/" : $dir) . $name;
	if( file_exists($fullpath) ) {
	  if( $url ) {
		$url = $url . '/' . $name;
	  }
	  elseif( substr($dir, 0, 1) == '/' && ! $url ) {
	    global $base_url;
		$url = $base_url . '/' . $name;
	  }
	  else {
		$url = base_path() . $fullpath;
	  }

	  return array('path' => $fullpath, 'url' => $url);
	}
  }

  return array();
}

function filelinks_settings($key=null) {
  static $settings = null;

  if( ! is_array($settings) ) {
	$settings = variable_get('filelinks_settings', array('paths' => array()));
  }

  return $key ? $settings[$key] : $settings;
}

/*
 * theme_filelink: returns a hyperlink to a file, given the following array:
 * 'filename' => either an absolute url, or a path to a file relative to one of the directories specified in settings
 # 'id' => specifier for a specific directory (optional)
 * 'text' => text of link (otherwise, use filename)
 * 'description' => descriptive text, shown along with attributes after the link
 * 'show_filetype' => whether to show file's type/extension in information description, true or false
 * 'show_dimensions' => whether to show image dimensions
 * 'show_pagecount'  => whether to show pdf page count
 * 'show_playlength'  => whether to show audio length
 * 'show_filesize'   => whether to show file size
 * 'show_all'        => all attributes showing
 * 'show_none'       => no attributes showing
 */
function theme_filelink($macro, $text='') {

  $m = $macro;
  if( ! is_array($m) ) {
	// also accept filename, text as arguments in place of full array
    $m = array('filename' => $m, 'text' => $text);
  }

  $m = filelinks_check($m);
  $info = $m['attributes'];
  if(!isset($m['text']) ) {
	// if no text, use the file name and don't show the file type
	$m['text'] = $m['filename'];
	if( strtoupper($m['type']) == $m['type_'] ) {
	  // showing the file type would be redundant
	  $m['show_filetype'] = false;
	}
  }

  if( ! $m['url'] ) {
    return '<span class="filelink_description" title="' . check_plain($m['filename']) . '">' . check_plain($m['text']) . '</span>';
  }

      // define extra parameters
      $more = array();
      if( $m['description'] )
        $more[] = check_plain($m['description']);
      if( $m['show_filetype'] && isset($info['type_']) )
        $more[] = $info['type_'];
      if( $m['show_dimensions'] && isset($info['width']) && isset($info['height']) )
        $more[] = "$info[width]&nbsp;x&nbsp;$info[height]&nbsp;px";
      if( $m['show_pagecount'] && isset($info['pages']) )
		$more[] = format_plural($info['pages'], '1&nbsp;page', '@count&nbsp;pages');
      if( $m['show_playlength'] && isset($info['playlength']) ) {
	    $mins = (int) ($info['playlength'] / 60);
		$secs = $info['playlength'] % 60;
		if( $mins > 60 ) {
		  $more[] = sprintf('%d:%2d:%2d', $mins/60, $mins%60, $secs);
		}
		else {
		  $more[] = sprintf('%d:%2d', $mins%60, $secs);
		}
	  }
      if( $m['show_filesize'] && isset($info['size_']) )
        $more[] = $info['size_'];

      if( count($more) ) {
        $extra = ' <span class="filelink_description">(' . implode(', ', $more) . ')</span>';
      }

      $link = '<a class="filelink';
      if( $info['type'] ) {
        $link .= ' filelink_' . strtolower($info['type']);
      }

      $link .= '" href="' . $m['url'] . '" title="' . $m['text'] . '">' . $m['text'] . '</a>' . $extra;
      return $link;
}

function filelinks_check($macro) {
  static $types = array(
    'doc' => 'Word File', 'docx' => 'Word File',
    'xls' => 'Excel', 'xlsx' => 'Excel',
    'ppt' => 'Powerpoint', 'pptx' => 'Powerpoint',
    'rm' => 'Real Player', 'ram' => 'Real Player',
    'zip' => 'ZIP archive');
  static $show_keys = array('show_filetype', 'show_filesize', 'show_dimensions', 'show_pagecount', 'show_playlength');

  // trap for duplicate macros so we don't check twice
  if( $macro['processed'] ) {
   return $macro;
  }

  $macro['processed'] = 1;

  foreach($show_keys as $key) {
    if( ! isset($macro[$key]) ) {
	  if( $macro['show_all'] ) {
	    $macro[$key] = true;
	  }
	  elseif( $macro['show_none'] ) {
	    $macro[$key] = false;
	  }
	  else {
	    $macro[$key] = filelinks_settings($key);
	  }
	}
  }

  if( preg_match('#^\w+://#', $macro['filename']) ) {
    // this looks like a well-formed url
	$macro['url'] = $macro['filename'];
	unset($macro['path']);

	$parts = parse_url($macro['filename']);
	$info = pathinfo($parts['path']);
  }
  else {
    // this is a local file
	$macro = array_merge($macro, filelinks_findfile($macro['filename'], $macro['id'])); // find path and url
	$info = pathinfo($macro['path']);
  }

  // at a minimum, do the extension
  if( ! is_array($macro['attributes']) ) {
	$macro['attributes'] = array();
  }

  $ext = strtolower($info['extension']);
  if( $ext == 'jpg' ) {
    $ext = 'jpeg';
  }

  $macro['attributes']['name'] = $info['basename'];
  $macro['attributes']['type'] = $ext;
  if( $types[$ext] ) {
    $macro['attributes']['type_'] = $types[$ext];
  }
  else {
    $macro['attributes']['type_'] = strtoupper($macro['attributes']['type']);
  }

  $macro['attributes'] = array_merge($macro['attributes'], filelinks_file_attributes($macro));

  return $macro;
}

function filelinks_file_attributes($macro) {

  $attr = _filelinks_file_attributes($macro);

  // Also show in readable form
  if( $attr['size'] ) {
	$sz = $attr['size'];
	if( $sz > 1048756 )
	  $attr['size_'] = number_format($sz/1048756, 1, '.', '') . '&nbsp;Mb';
	elseif( $sz > 1024 )
	  $attr['size_'] = number_format($sz/1024, 0) . '&nbsp;Kb';
	else
	  $attr['size_'] = number_format($sz, 0) . '&nbsp;bytes';
  }

  return $attr;
}

function _filelinks_file_attributes($macro) {

  if( isset($macro['attributes']['size']) ) {
	// Under some circumstances, attributes will already be set by an external interface, so return if that's so
    return $macro['attributes'];
  }

  // also support passing a path as a string
  if( ! is_array($macro) ) {
    $macro = array('path' => $macro);
  }

  $attr = array();
  $file = null;

  if( $macro['path'] ) {
	$file = $macro['path'];
	$info = pathinfo($file);
	$ext  = strtolower($info['extension']);
	if( ($sz = @filesize($file)) === false )
	  return $attr;

	$attr['size'] = $sz;
  }
  elseif( $macro['url'] && filelinks_settings('usecurl') == 1 ) {
    // external url: issue a HEAD request to get the file size
	$ch = curl_init($macro['url']);
	curl_setopt($ch, CURLOPT_HEADER, 1);
	curl_setopt($ch, CURLOPT_NOBODY, 1);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

	curl_exec($ch);
	$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	$sz = curl_getinfo($ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD);
	curl_close($ch);
	if( $code == 200 ) {
	  $attr['size'] = $sz;
	}
  }
  else {
    return $attr;
  }

  // The rest only works on local files
  if( ! $file ) {
    return $attr;
  }

  if( $ext == 'pdf' ) {
    if( ($c = filelinks_pdf_pagecount($file)) !== false ) {
	  $attr['pages'] = $c;
	}

	return $attr;
  }

  if( $ext == 'mp3' ) {
    if( ($c = filelinks_mp3_playlength($file)) !== false ) {
	  $attr['playlength'] = $c;
	}
  }

  if( !($f = fopen($file, 'r')) ) {
    return $attr;
  }

  if( $ext == 'gif' ) {
    fseek($f, 6);
    $attr = array_merge($attr, unpack("vwidth/vheight", fread($f, 4)));
  }
  elseif( $ext == 'jpeg' || $ext == 'jpg' ) {
    fseek($f, 0);
    $attr['width'] = $attr['height'] = '???';
    while( !feof($f) ) {
      $tag = unpack("nsize", fread($f, 2));
      $tag = $tag['size'];
      if( $tag == 0xFFD8 ) {
        // for some reason this tag has no length
	$len = 0;
      }
      else {
        $len = unpack("nlen", fread($f, 2));
	$len = $len['len'];
	$len -= 2;
      }

      if( $tag == 65472 || $tag == 65474 ) {
        $attr = array_merge($attr, unpack("cdummy/nheight/nwidth", fread($f, 6)));
	break;
      }

      // advance to next tag
      fseek($f, $len, SEEK_CUR);
    }
  }
  elseif( $ext == 'png' ) {
    fseek($f, 16);
    $attr = array_merge($attr, unpack("Nwidth/Nheight", fread($f, 8)));
  }

  fclose($f);
  return $attr;
}

function filelinks_pdf_pagecount($f)
{

  if( ! ($path = filelinks_settings('pdfinfo')) ) {
    return false;
  }

  exec(escapeshellcmd($path) . ' ' . escapeshellarg($f), $result);
  foreach($result as $line) {
    if( preg_match('#^Pages:\s+(\d+)#i', $line, $matches) ) {
	  return $matches[1];
	}
  }

  return false;
}

/* filelinks_mp3_playlength: returns estimated length of an mp3 file in seconds.
   Adapted and stripped down from a perl module, see:

   http://www.cpan.org/modules/by-module/MP3
*/

function filelinks_mp3_playlength($path) {
  static $bitrates = array(
	1 => array(
	  /* Layer III */ 1 => array(0, 32, 40, 48,  56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320),
	  /* Layer II */  2 => array(0, 32, 48, 56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, 384),
      /* Layer I */   3 => array(0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448),
	),
	0 => array(
	  /* Layer III */ 1 => array(0,  8, 16, 24,  32,  40,  48,  56,  64,  80,  96, 112, 128, 144, 160), // same as layer II
	  /* Layer II */  2 => array(0,  8, 16, 24,  32,  40,  48,  56,  64,  80,  96, 112, 128, 144, 160),
	  /* Layer I */   3 => array(0, 32, 48, 56,  64,  80,  96, 112, 128, 144, 160, 176, 192, 224, 256),
	),
  );

  static $freqrates = array(
    /* mpeg1 */   3  => array(44100, 48000, 32000),
	/* mpeg2 */   2  => array(22050, 24000, 16000),
	/* mpeg2.5 */ 0 => array(11025, 12000,  8000),
  );

  if( ! ($fh = fopen($path, 'rb')) ) {
    return false;
  }

  # find end of stream: EOF, possibly less 128 bytes
  fseek($fh, 0, SEEK_END);
  $end = ftell($fh);
  fseek($fh, -128, SEEK_END);
  if( ($buf = fread($fh, 3)) === FALSE ) {
	fclose($fh);
    return false;
  }

  if( $buf == 'TAG' ) {
    $end -= 128;
  }

  # go to beginning, find the first legitimate tag
  fseek($fh, 0);
  $buf = fread($fh, min($end, 8192));
  $len = strlen($buf);
  for($i=0;$i<$len;$i++) {
	if( ord(substr($buf, $i, 1)) == 0xFF ) {
	  list($h) = array_values(unpack('N', substr($buf, $i, 4)));
	  $hdr = array('value' => $h,
	    'framesync' => ($h>>21),
		'id' => ($h>>19) & 3, 			// mpeg audio version ID (if & 1, v1, else v2)
		'layer' => ($h>>17) & 3,		// layer description: 1: III, 2: II, 3: I
		'protect' => ($h>>16) & 1,		// 1 if unprotected
		'bitidx' => ($h>>12) & 15,		// bit rate index: use id and layer to lookup
		'sampidx' => ($h>>10) & 3,		// sampling frequency index: use id to lookup
		'padbit'   => ($h>>9) & 1,		// pad bit
		'channel' => ($h>>6) & 3,		// channel (mono, stereo)
		'mode_ext' => ($h>>4) & 3,		// channel mode extension
		'copy'    => ($h>>3) & 1,		// 1: copyrighted
		'orig'    => ($h>>2) & 1,		// 1: original (not duplicate)
		'emphasis' => ($h) & 3,			// emphasis
	  );

	  $hdr['bitrate'] = $bitrates[$hdr['id'] & 1][$hdr['layer']][$hdr['bitidx']];
	  $hdr['samplefreq'] = $freqrates[$hdr['id']][$hdr['sampidx']];

	  # sanity check. Is this a valid header?
	  if( $hdr['framesync'] == -1 &&		// must be all bits on
		$hdr['id'] != 1 && // reserved
		$hdr['bitidx'] != 0 && $hdr['bitidx'] != 15 && // reserved or bogus
		$hdr['sampidx'] != 3 &&	 // reserved
		$hdr['bitrate'] && $hdr['samplefreq'] &&
		$hdr['layer'] != 0 && 		// reserved
		$hdr['emphasis'] != 2 &&	// not sure what this means
		( ($hdr['id']&1)!=1 || $hdr['layer']!=3 || $hdr['protect']!= 1) // in v1, layer I is not allowed to be unprotected(?)
		) break;
	}
  }

  if( $i == $len ) {
    fclose($fh);
	return false;
  }

  /* Note that in the rare case that this is a variable bitrate file, we are not
     actually yet at the start of the data stream, we may be short by as much as 152
	 bytes. This is just lazy, but since we only are estimating the playlength we
	 don't care. Even at low bitrates, 152 bytes means we're only off 4/100ths of a
	 second, so it's not worth the extra code.
  */

  return round((($end-$i) * 8 / $hdr['bitrate']/10) / 100);
}
